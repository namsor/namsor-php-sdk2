<?php
/**
 * APIPeriodUsageOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * APIPeriodUsageOut Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIPeriodUsageOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APIPeriodUsageOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subscription' => '\OpenAPI\Client\Model\APIPlanSubscriptionOut',
        'billing_period' => '\OpenAPI\Client\Model\APIBillingPeriodUsageOut',
        'overage_excl_tax' => 'double',
        'overage_incl_tax' => 'double',
        'overage_currency' => 'string',
        'overage_quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'subscription' => null,
        'billing_period' => null,
        'overage_excl_tax' => 'double',
        'overage_incl_tax' => 'double',
        'overage_currency' => null,
        'overage_quantity' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscription' => 'subscription',
        'billing_period' => 'billingPeriod',
        'overage_excl_tax' => 'overageExclTax',
        'overage_incl_tax' => 'overageInclTax',
        'overage_currency' => 'overageCurrency',
        'overage_quantity' => 'overageQuantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscription' => 'setSubscription',
        'billing_period' => 'setBillingPeriod',
        'overage_excl_tax' => 'setOverageExclTax',
        'overage_incl_tax' => 'setOverageInclTax',
        'overage_currency' => 'setOverageCurrency',
        'overage_quantity' => 'setOverageQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscription' => 'getSubscription',
        'billing_period' => 'getBillingPeriod',
        'overage_excl_tax' => 'getOverageExclTax',
        'overage_incl_tax' => 'getOverageInclTax',
        'overage_currency' => 'getOverageCurrency',
        'overage_quantity' => 'getOverageQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['billing_period'] = isset($data['billing_period']) ? $data['billing_period'] : null;
        $this->container['overage_excl_tax'] = isset($data['overage_excl_tax']) ? $data['overage_excl_tax'] : null;
        $this->container['overage_incl_tax'] = isset($data['overage_incl_tax']) ? $data['overage_incl_tax'] : null;
        $this->container['overage_currency'] = isset($data['overage_currency']) ? $data['overage_currency'] : null;
        $this->container['overage_quantity'] = isset($data['overage_quantity']) ? $data['overage_quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscription
     *
     * @return \OpenAPI\Client\Model\APIPlanSubscriptionOut|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \OpenAPI\Client\Model\APIPlanSubscriptionOut|null $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets billing_period
     *
     * @return \OpenAPI\Client\Model\APIBillingPeriodUsageOut|null
     */
    public function getBillingPeriod()
    {
        return $this->container['billing_period'];
    }

    /**
     * Sets billing_period
     *
     * @param \OpenAPI\Client\Model\APIBillingPeriodUsageOut|null $billing_period billing_period
     *
     * @return $this
     */
    public function setBillingPeriod($billing_period)
    {
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * Gets overage_excl_tax
     *
     * @return double|null
     */
    public function getOverageExclTax()
    {
        return $this->container['overage_excl_tax'];
    }

    /**
     * Sets overage_excl_tax
     *
     * @param double|null $overage_excl_tax overage_excl_tax
     *
     * @return $this
     */
    public function setOverageExclTax($overage_excl_tax)
    {
        $this->container['overage_excl_tax'] = $overage_excl_tax;

        return $this;
    }

    /**
     * Gets overage_incl_tax
     *
     * @return double|null
     */
    public function getOverageInclTax()
    {
        return $this->container['overage_incl_tax'];
    }

    /**
     * Sets overage_incl_tax
     *
     * @param double|null $overage_incl_tax overage_incl_tax
     *
     * @return $this
     */
    public function setOverageInclTax($overage_incl_tax)
    {
        $this->container['overage_incl_tax'] = $overage_incl_tax;

        return $this;
    }

    /**
     * Gets overage_currency
     *
     * @return string|null
     */
    public function getOverageCurrency()
    {
        return $this->container['overage_currency'];
    }

    /**
     * Sets overage_currency
     *
     * @param string|null $overage_currency overage_currency
     *
     * @return $this
     */
    public function setOverageCurrency($overage_currency)
    {
        $this->container['overage_currency'] = $overage_currency;

        return $this;
    }

    /**
     * Gets overage_quantity
     *
     * @return int|null
     */
    public function getOverageQuantity()
    {
        return $this->container['overage_quantity'];
    }

    /**
     * Sets overage_quantity
     *
     * @param int|null $overage_quantity overage_quantity
     *
     * @return $this
     */
    public function setOverageQuantity($overage_quantity)
    {
        $this->container['overage_quantity'] = $overage_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


