<?php
/**
 * FirstLastNamePhoneCodedOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.2-beta
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FirstLastNamePhoneCodedOut Class Doc Comment
 *
 * @category Class
 * @description Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FirstLastNamePhoneCodedOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FirstLastNamePhoneCodedOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'international_phone_number_verified' => 'string',
        'phone_country_iso2_verified' => 'string',
        'phone_country_code' => 'int',
        'phone_country_code_alt' => 'int',
        'phone_country_iso2' => 'string',
        'phone_country_iso2_alt' => 'string',
        'origin_country_iso2' => 'string',
        'origin_country_iso2_alt' => 'string',
        'phone_number' => 'string',
        'verified' => 'bool',
        'score' => 'double',
        'country_iso2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'first_name' => null,
        'last_name' => null,
        'international_phone_number_verified' => null,
        'phone_country_iso2_verified' => null,
        'phone_country_code' => 'int32',
        'phone_country_code_alt' => 'int32',
        'phone_country_iso2' => null,
        'phone_country_iso2_alt' => null,
        'origin_country_iso2' => null,
        'origin_country_iso2_alt' => null,
        'phone_number' => null,
        'verified' => null,
        'score' => 'double',
        'country_iso2' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'international_phone_number_verified' => 'internationalPhoneNumberVerified',
        'phone_country_iso2_verified' => 'phoneCountryIso2Verified',
        'phone_country_code' => 'phoneCountryCode',
        'phone_country_code_alt' => 'phoneCountryCodeAlt',
        'phone_country_iso2' => 'phoneCountryIso2',
        'phone_country_iso2_alt' => 'phoneCountryIso2Alt',
        'origin_country_iso2' => 'originCountryIso2',
        'origin_country_iso2_alt' => 'originCountryIso2Alt',
        'phone_number' => 'phoneNumber',
        'verified' => 'verified',
        'score' => 'score',
        'country_iso2' => 'countryIso2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'international_phone_number_verified' => 'setInternationalPhoneNumberVerified',
        'phone_country_iso2_verified' => 'setPhoneCountryIso2Verified',
        'phone_country_code' => 'setPhoneCountryCode',
        'phone_country_code_alt' => 'setPhoneCountryCodeAlt',
        'phone_country_iso2' => 'setPhoneCountryIso2',
        'phone_country_iso2_alt' => 'setPhoneCountryIso2Alt',
        'origin_country_iso2' => 'setOriginCountryIso2',
        'origin_country_iso2_alt' => 'setOriginCountryIso2Alt',
        'phone_number' => 'setPhoneNumber',
        'verified' => 'setVerified',
        'score' => 'setScore',
        'country_iso2' => 'setCountryIso2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'international_phone_number_verified' => 'getInternationalPhoneNumberVerified',
        'phone_country_iso2_verified' => 'getPhoneCountryIso2Verified',
        'phone_country_code' => 'getPhoneCountryCode',
        'phone_country_code_alt' => 'getPhoneCountryCodeAlt',
        'phone_country_iso2' => 'getPhoneCountryIso2',
        'phone_country_iso2_alt' => 'getPhoneCountryIso2Alt',
        'origin_country_iso2' => 'getOriginCountryIso2',
        'origin_country_iso2_alt' => 'getOriginCountryIso2Alt',
        'phone_number' => 'getPhoneNumber',
        'verified' => 'getVerified',
        'score' => 'getScore',
        'country_iso2' => 'getCountryIso2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['international_phone_number_verified'] = isset($data['international_phone_number_verified']) ? $data['international_phone_number_verified'] : null;
        $this->container['phone_country_iso2_verified'] = isset($data['phone_country_iso2_verified']) ? $data['phone_country_iso2_verified'] : null;
        $this->container['phone_country_code'] = isset($data['phone_country_code']) ? $data['phone_country_code'] : null;
        $this->container['phone_country_code_alt'] = isset($data['phone_country_code_alt']) ? $data['phone_country_code_alt'] : null;
        $this->container['phone_country_iso2'] = isset($data['phone_country_iso2']) ? $data['phone_country_iso2'] : null;
        $this->container['phone_country_iso2_alt'] = isset($data['phone_country_iso2_alt']) ? $data['phone_country_iso2_alt'] : null;
        $this->container['origin_country_iso2'] = isset($data['origin_country_iso2']) ? $data['origin_country_iso2'] : null;
        $this->container['origin_country_iso2_alt'] = isset($data['origin_country_iso2_alt']) ? $data['origin_country_iso2_alt'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['country_iso2'] = isset($data['country_iso2']) ? $data['country_iso2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets international_phone_number_verified
     *
     * @return string|null
     */
    public function getInternationalPhoneNumberVerified()
    {
        return $this->container['international_phone_number_verified'];
    }

    /**
     * Sets international_phone_number_verified
     *
     * @param string|null $international_phone_number_verified international_phone_number_verified
     *
     * @return $this
     */
    public function setInternationalPhoneNumberVerified($international_phone_number_verified)
    {
        $this->container['international_phone_number_verified'] = $international_phone_number_verified;

        return $this;
    }

    /**
     * Gets phone_country_iso2_verified
     *
     * @return string|null
     */
    public function getPhoneCountryIso2Verified()
    {
        return $this->container['phone_country_iso2_verified'];
    }

    /**
     * Sets phone_country_iso2_verified
     *
     * @param string|null $phone_country_iso2_verified phone_country_iso2_verified
     *
     * @return $this
     */
    public function setPhoneCountryIso2Verified($phone_country_iso2_verified)
    {
        $this->container['phone_country_iso2_verified'] = $phone_country_iso2_verified;

        return $this;
    }

    /**
     * Gets phone_country_code
     *
     * @return int|null
     */
    public function getPhoneCountryCode()
    {
        return $this->container['phone_country_code'];
    }

    /**
     * Sets phone_country_code
     *
     * @param int|null $phone_country_code phone_country_code
     *
     * @return $this
     */
    public function setPhoneCountryCode($phone_country_code)
    {
        $this->container['phone_country_code'] = $phone_country_code;

        return $this;
    }

    /**
     * Gets phone_country_code_alt
     *
     * @return int|null
     */
    public function getPhoneCountryCodeAlt()
    {
        return $this->container['phone_country_code_alt'];
    }

    /**
     * Sets phone_country_code_alt
     *
     * @param int|null $phone_country_code_alt phone_country_code_alt
     *
     * @return $this
     */
    public function setPhoneCountryCodeAlt($phone_country_code_alt)
    {
        $this->container['phone_country_code_alt'] = $phone_country_code_alt;

        return $this;
    }

    /**
     * Gets phone_country_iso2
     *
     * @return string|null
     */
    public function getPhoneCountryIso2()
    {
        return $this->container['phone_country_iso2'];
    }

    /**
     * Sets phone_country_iso2
     *
     * @param string|null $phone_country_iso2 phone_country_iso2
     *
     * @return $this
     */
    public function setPhoneCountryIso2($phone_country_iso2)
    {
        $this->container['phone_country_iso2'] = $phone_country_iso2;

        return $this;
    }

    /**
     * Gets phone_country_iso2_alt
     *
     * @return string|null
     */
    public function getPhoneCountryIso2Alt()
    {
        return $this->container['phone_country_iso2_alt'];
    }

    /**
     * Sets phone_country_iso2_alt
     *
     * @param string|null $phone_country_iso2_alt phone_country_iso2_alt
     *
     * @return $this
     */
    public function setPhoneCountryIso2Alt($phone_country_iso2_alt)
    {
        $this->container['phone_country_iso2_alt'] = $phone_country_iso2_alt;

        return $this;
    }

    /**
     * Gets origin_country_iso2
     *
     * @return string|null
     */
    public function getOriginCountryIso2()
    {
        return $this->container['origin_country_iso2'];
    }

    /**
     * Sets origin_country_iso2
     *
     * @param string|null $origin_country_iso2 origin_country_iso2
     *
     * @return $this
     */
    public function setOriginCountryIso2($origin_country_iso2)
    {
        $this->container['origin_country_iso2'] = $origin_country_iso2;

        return $this;
    }

    /**
     * Gets origin_country_iso2_alt
     *
     * @return string|null
     */
    public function getOriginCountryIso2Alt()
    {
        return $this->container['origin_country_iso2_alt'];
    }

    /**
     * Sets origin_country_iso2_alt
     *
     * @param string|null $origin_country_iso2_alt origin_country_iso2_alt
     *
     * @return $this
     */
    public function setOriginCountryIso2Alt($origin_country_iso2_alt)
    {
        $this->container['origin_country_iso2_alt'] = $origin_country_iso2_alt;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets score
     *
     * @return double|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param double|null $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets country_iso2
     *
     * @return string|null
     */
    public function getCountryIso2()
    {
        return $this->container['country_iso2'];
    }

    /**
     * Sets country_iso2
     *
     * @param string|null $country_iso2 country_iso2
     *
     * @return $this
     */
    public function setCountryIso2($country_iso2)
    {
        $this->container['country_iso2'] = $country_iso2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


