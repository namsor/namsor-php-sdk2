<?php
/**
 * InvoiceItemOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.2-beta
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceItemOut Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoiceItemOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceItemOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_id' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'description' => 'string',
        'quantity' => 'int',
        'subscription' => 'string',
        'subscription_item' => 'string',
        'invoice_item_type' => 'string',
        'plan_nickname' => 'string',
        'plan_desc' => 'string',
        'plan_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'item_id' => null,
        'amount' => 'int64',
        'currency' => null,
        'description' => null,
        'quantity' => 'int64',
        'subscription' => null,
        'subscription_item' => null,
        'invoice_item_type' => null,
        'plan_nickname' => null,
        'plan_desc' => null,
        'plan_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'itemId',
        'amount' => 'amount',
        'currency' => 'currency',
        'description' => 'description',
        'quantity' => 'quantity',
        'subscription' => 'subscription',
        'subscription_item' => 'subscriptionItem',
        'invoice_item_type' => 'invoiceItemType',
        'plan_nickname' => 'planNickname',
        'plan_desc' => 'planDesc',
        'plan_name' => 'planName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'subscription' => 'setSubscription',
        'subscription_item' => 'setSubscriptionItem',
        'invoice_item_type' => 'setInvoiceItemType',
        'plan_nickname' => 'setPlanNickname',
        'plan_desc' => 'setPlanDesc',
        'plan_name' => 'setPlanName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'subscription' => 'getSubscription',
        'subscription_item' => 'getSubscriptionItem',
        'invoice_item_type' => 'getInvoiceItemType',
        'plan_nickname' => 'getPlanNickname',
        'plan_desc' => 'getPlanDesc',
        'plan_name' => 'getPlanName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['subscription_item'] = isset($data['subscription_item']) ? $data['subscription_item'] : null;
        $this->container['invoice_item_type'] = isset($data['invoice_item_type']) ? $data['invoice_item_type'] : null;
        $this->container['plan_nickname'] = isset($data['plan_nickname']) ? $data['plan_nickname'] : null;
        $this->container['plan_desc'] = isset($data['plan_desc']) ? $data['plan_desc'] : null;
        $this->container['plan_name'] = isset($data['plan_name']) ? $data['plan_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return string|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string|null $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets subscription_item
     *
     * @return string|null
     */
    public function getSubscriptionItem()
    {
        return $this->container['subscription_item'];
    }

    /**
     * Sets subscription_item
     *
     * @param string|null $subscription_item subscription_item
     *
     * @return $this
     */
    public function setSubscriptionItem($subscription_item)
    {
        $this->container['subscription_item'] = $subscription_item;

        return $this;
    }

    /**
     * Gets invoice_item_type
     *
     * @return string|null
     */
    public function getInvoiceItemType()
    {
        return $this->container['invoice_item_type'];
    }

    /**
     * Sets invoice_item_type
     *
     * @param string|null $invoice_item_type invoice_item_type
     *
     * @return $this
     */
    public function setInvoiceItemType($invoice_item_type)
    {
        $this->container['invoice_item_type'] = $invoice_item_type;

        return $this;
    }

    /**
     * Gets plan_nickname
     *
     * @return string|null
     */
    public function getPlanNickname()
    {
        return $this->container['plan_nickname'];
    }

    /**
     * Sets plan_nickname
     *
     * @param string|null $plan_nickname plan_nickname
     *
     * @return $this
     */
    public function setPlanNickname($plan_nickname)
    {
        $this->container['plan_nickname'] = $plan_nickname;

        return $this;
    }

    /**
     * Gets plan_desc
     *
     * @return string|null
     */
    public function getPlanDesc()
    {
        return $this->container['plan_desc'];
    }

    /**
     * Sets plan_desc
     *
     * @param string|null $plan_desc plan_desc
     *
     * @return $this
     */
    public function setPlanDesc($plan_desc)
    {
        $this->container['plan_desc'] = $plan_desc;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return string|null
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param string|null $plan_name plan_name
     *
     * @return $this
     */
    public function setPlanName($plan_name)
    {
        $this->container['plan_name'] = $plan_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


