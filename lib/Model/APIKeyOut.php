<?php
/**
 * APIKeyOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.6
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * APIKeyOut Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIKeyOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APIKeyOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'user_id' => 'string',
        'admin' => 'bool',
        'vetted' => 'bool',
        'learnable' => 'bool',
        'anonymized' => 'bool',
        'partner' => 'bool',
        'striped' => 'bool',
        'corporate' => 'bool',
        'disabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'user_id' => null,
        'admin' => null,
        'vetted' => null,
        'learnable' => null,
        'anonymized' => null,
        'partner' => null,
        'striped' => null,
        'corporate' => null,
        'disabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'apiKey',
        'user_id' => 'userId',
        'admin' => 'admin',
        'vetted' => 'vetted',
        'learnable' => 'learnable',
        'anonymized' => 'anonymized',
        'partner' => 'partner',
        'striped' => 'striped',
        'corporate' => 'corporate',
        'disabled' => 'disabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'user_id' => 'setUserId',
        'admin' => 'setAdmin',
        'vetted' => 'setVetted',
        'learnable' => 'setLearnable',
        'anonymized' => 'setAnonymized',
        'partner' => 'setPartner',
        'striped' => 'setStriped',
        'corporate' => 'setCorporate',
        'disabled' => 'setDisabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'user_id' => 'getUserId',
        'admin' => 'getAdmin',
        'vetted' => 'getVetted',
        'learnable' => 'getLearnable',
        'anonymized' => 'getAnonymized',
        'partner' => 'getPartner',
        'striped' => 'getStriped',
        'corporate' => 'getCorporate',
        'disabled' => 'getDisabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['admin'] = isset($data['admin']) ? $data['admin'] : null;
        $this->container['vetted'] = isset($data['vetted']) ? $data['vetted'] : null;
        $this->container['learnable'] = isset($data['learnable']) ? $data['learnable'] : null;
        $this->container['anonymized'] = isset($data['anonymized']) ? $data['anonymized'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['striped'] = isset($data['striped']) ? $data['striped'] : null;
        $this->container['corporate'] = isset($data['corporate']) ? $data['corporate'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key api_key
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool|null
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool|null $admin admin
     *
     * @return $this
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets vetted
     *
     * @return bool|null
     */
    public function getVetted()
    {
        return $this->container['vetted'];
    }

    /**
     * Sets vetted
     *
     * @param bool|null $vetted vetted
     *
     * @return $this
     */
    public function setVetted($vetted)
    {
        $this->container['vetted'] = $vetted;

        return $this;
    }

    /**
     * Gets learnable
     *
     * @return bool|null
     */
    public function getLearnable()
    {
        return $this->container['learnable'];
    }

    /**
     * Sets learnable
     *
     * @param bool|null $learnable learnable
     *
     * @return $this
     */
    public function setLearnable($learnable)
    {
        $this->container['learnable'] = $learnable;

        return $this;
    }

    /**
     * Gets anonymized
     *
     * @return bool|null
     */
    public function getAnonymized()
    {
        return $this->container['anonymized'];
    }

    /**
     * Sets anonymized
     *
     * @param bool|null $anonymized anonymized
     *
     * @return $this
     */
    public function setAnonymized($anonymized)
    {
        $this->container['anonymized'] = $anonymized;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return bool|null
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param bool|null $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets striped
     *
     * @return bool|null
     */
    public function getStriped()
    {
        return $this->container['striped'];
    }

    /**
     * Sets striped
     *
     * @param bool|null $striped striped
     *
     * @return $this
     */
    public function setStriped($striped)
    {
        $this->container['striped'] = $striped;

        return $this;
    }

    /**
     * Gets corporate
     *
     * @return bool|null
     */
    public function getCorporate()
    {
        return $this->container['corporate'];
    }

    /**
     * Sets corporate
     *
     * @param bool|null $corporate corporate
     *
     * @return $this
     */
    public function setCorporate($corporate)
    {
        $this->container['corporate'] = $corporate;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


