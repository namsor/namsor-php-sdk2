<?php
/**
 * APICounterV2Out
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.9
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * APICounterV2Out Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APICounterV2Out implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APICounterV2Out';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => '\OpenAPI\Client\Model\APIKeyOut',
        'api_service' => 'string',
        'created_date_time' => 'int',
        'total_usage' => 'int',
        'last_flushed_date_time' => 'int',
        'last_used_date_time' => 'int',
        'service_features_usage' => 'map[string,int]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'api_service' => null,
        'created_date_time' => 'int64',
        'total_usage' => 'int64',
        'last_flushed_date_time' => 'int64',
        'last_used_date_time' => 'int64',
        'service_features_usage' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'apiKey',
        'api_service' => 'apiService',
        'created_date_time' => 'createdDateTime',
        'total_usage' => 'totalUsage',
        'last_flushed_date_time' => 'lastFlushedDateTime',
        'last_used_date_time' => 'lastUsedDateTime',
        'service_features_usage' => 'serviceFeaturesUsage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'api_service' => 'setApiService',
        'created_date_time' => 'setCreatedDateTime',
        'total_usage' => 'setTotalUsage',
        'last_flushed_date_time' => 'setLastFlushedDateTime',
        'last_used_date_time' => 'setLastUsedDateTime',
        'service_features_usage' => 'setServiceFeaturesUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'api_service' => 'getApiService',
        'created_date_time' => 'getCreatedDateTime',
        'total_usage' => 'getTotalUsage',
        'last_flushed_date_time' => 'getLastFlushedDateTime',
        'last_used_date_time' => 'getLastUsedDateTime',
        'service_features_usage' => 'getServiceFeaturesUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['api_service'] = isset($data['api_service']) ? $data['api_service'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['total_usage'] = isset($data['total_usage']) ? $data['total_usage'] : null;
        $this->container['last_flushed_date_time'] = isset($data['last_flushed_date_time']) ? $data['last_flushed_date_time'] : null;
        $this->container['last_used_date_time'] = isset($data['last_used_date_time']) ? $data['last_used_date_time'] : null;
        $this->container['service_features_usage'] = isset($data['service_features_usage']) ? $data['service_features_usage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return \OpenAPI\Client\Model\APIKeyOut|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param \OpenAPI\Client\Model\APIKeyOut|null $api_key api_key
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets api_service
     *
     * @return string|null
     */
    public function getApiService()
    {
        return $this->container['api_service'];
    }

    /**
     * Sets api_service
     *
     * @param string|null $api_service api_service
     *
     * @return $this
     */
    public function setApiService($api_service)
    {
        $this->container['api_service'] = $api_service;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return int|null
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param int|null $created_date_time created_date_time
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets total_usage
     *
     * @return int|null
     */
    public function getTotalUsage()
    {
        return $this->container['total_usage'];
    }

    /**
     * Sets total_usage
     *
     * @param int|null $total_usage total_usage
     *
     * @return $this
     */
    public function setTotalUsage($total_usage)
    {
        $this->container['total_usage'] = $total_usage;

        return $this;
    }

    /**
     * Gets last_flushed_date_time
     *
     * @return int|null
     */
    public function getLastFlushedDateTime()
    {
        return $this->container['last_flushed_date_time'];
    }

    /**
     * Sets last_flushed_date_time
     *
     * @param int|null $last_flushed_date_time last_flushed_date_time
     *
     * @return $this
     */
    public function setLastFlushedDateTime($last_flushed_date_time)
    {
        $this->container['last_flushed_date_time'] = $last_flushed_date_time;

        return $this;
    }

    /**
     * Gets last_used_date_time
     *
     * @return int|null
     */
    public function getLastUsedDateTime()
    {
        return $this->container['last_used_date_time'];
    }

    /**
     * Sets last_used_date_time
     *
     * @param int|null $last_used_date_time last_used_date_time
     *
     * @return $this
     */
    public function setLastUsedDateTime($last_used_date_time)
    {
        $this->container['last_used_date_time'] = $last_used_date_time;

        return $this;
    }

    /**
     * Gets service_features_usage
     *
     * @return map[string,int]|null
     */
    public function getServiceFeaturesUsage()
    {
        return $this->container['service_features_usage'];
    }

    /**
     * Sets service_features_usage
     *
     * @param map[string,int]|null $service_features_usage service_features_usage
     *
     * @return $this
     */
    public function setServiceFeaturesUsage($service_features_usage)
    {
        $this->container['service_features_usage'] = $service_features_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


