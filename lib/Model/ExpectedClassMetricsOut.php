<?php
/**
 * ExpectedClassMetricsOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExpectedClassMetricsOut Class Doc Comment
 *
 * @category Class
 * @description Simple metrics on a classifier, for a given expected class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExpectedClassMetricsOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExpectedClassMetricsOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'classifier_name' => 'string',
        'expected_class' => 'string',
        'ai_estimate_total' => 'int',
        'ai_estimate_precision' => 'double',
        'ai_estimate_recall' => 'double',
        'ai_learn_total' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'classifier_name' => null,
        'expected_class' => null,
        'ai_estimate_total' => 'int64',
        'ai_estimate_precision' => 'double',
        'ai_estimate_recall' => 'double',
        'ai_learn_total' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'classifier_name' => 'classifierName',
        'expected_class' => 'expectedClass',
        'ai_estimate_total' => 'aiEstimateTotal',
        'ai_estimate_precision' => 'aiEstimatePrecision',
        'ai_estimate_recall' => 'aiEstimateRecall',
        'ai_learn_total' => 'aiLearnTotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'classifier_name' => 'setClassifierName',
        'expected_class' => 'setExpectedClass',
        'ai_estimate_total' => 'setAiEstimateTotal',
        'ai_estimate_precision' => 'setAiEstimatePrecision',
        'ai_estimate_recall' => 'setAiEstimateRecall',
        'ai_learn_total' => 'setAiLearnTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'classifier_name' => 'getClassifierName',
        'expected_class' => 'getExpectedClass',
        'ai_estimate_total' => 'getAiEstimateTotal',
        'ai_estimate_precision' => 'getAiEstimatePrecision',
        'ai_estimate_recall' => 'getAiEstimateRecall',
        'ai_learn_total' => 'getAiLearnTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['classifier_name'] = isset($data['classifier_name']) ? $data['classifier_name'] : null;
        $this->container['expected_class'] = isset($data['expected_class']) ? $data['expected_class'] : null;
        $this->container['ai_estimate_total'] = isset($data['ai_estimate_total']) ? $data['ai_estimate_total'] : null;
        $this->container['ai_estimate_precision'] = isset($data['ai_estimate_precision']) ? $data['ai_estimate_precision'] : null;
        $this->container['ai_estimate_recall'] = isset($data['ai_estimate_recall']) ? $data['ai_estimate_recall'] : null;
        $this->container['ai_learn_total'] = isset($data['ai_learn_total']) ? $data['ai_learn_total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets classifier_name
     *
     * @return string|null
     */
    public function getClassifierName()
    {
        return $this->container['classifier_name'];
    }

    /**
     * Sets classifier_name
     *
     * @param string|null $classifier_name classifier_name
     *
     * @return $this
     */
    public function setClassifierName($classifier_name)
    {
        $this->container['classifier_name'] = $classifier_name;

        return $this;
    }

    /**
     * Gets expected_class
     *
     * @return string|null
     */
    public function getExpectedClass()
    {
        return $this->container['expected_class'];
    }

    /**
     * Sets expected_class
     *
     * @param string|null $expected_class expected_class
     *
     * @return $this
     */
    public function setExpectedClass($expected_class)
    {
        $this->container['expected_class'] = $expected_class;

        return $this;
    }

    /**
     * Gets ai_estimate_total
     *
     * @return int|null
     */
    public function getAiEstimateTotal()
    {
        return $this->container['ai_estimate_total'];
    }

    /**
     * Sets ai_estimate_total
     *
     * @param int|null $ai_estimate_total ai_estimate_total
     *
     * @return $this
     */
    public function setAiEstimateTotal($ai_estimate_total)
    {
        $this->container['ai_estimate_total'] = $ai_estimate_total;

        return $this;
    }

    /**
     * Gets ai_estimate_precision
     *
     * @return double|null
     */
    public function getAiEstimatePrecision()
    {
        return $this->container['ai_estimate_precision'];
    }

    /**
     * Sets ai_estimate_precision
     *
     * @param double|null $ai_estimate_precision ai_estimate_precision
     *
     * @return $this
     */
    public function setAiEstimatePrecision($ai_estimate_precision)
    {
        $this->container['ai_estimate_precision'] = $ai_estimate_precision;

        return $this;
    }

    /**
     * Gets ai_estimate_recall
     *
     * @return double|null
     */
    public function getAiEstimateRecall()
    {
        return $this->container['ai_estimate_recall'];
    }

    /**
     * Sets ai_estimate_recall
     *
     * @param double|null $ai_estimate_recall ai_estimate_recall
     *
     * @return $this
     */
    public function setAiEstimateRecall($ai_estimate_recall)
    {
        $this->container['ai_estimate_recall'] = $ai_estimate_recall;

        return $this;
    }

    /**
     * Gets ai_learn_total
     *
     * @return int|null
     */
    public function getAiLearnTotal()
    {
        return $this->container['ai_learn_total'];
    }

    /**
     * Sets ai_learn_total
     *
     * @param int|null $ai_learn_total ai_learn_total
     *
     * @return $this
     */
    public function setAiLearnTotal($ai_learn_total)
    {
        $this->container['ai_learn_total'] = $ai_learn_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


