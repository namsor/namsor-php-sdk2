<?php
/**
 * APIUsageAggregatedOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.8
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * APIUsageAggregatedOut Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIUsageAggregatedOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APIUsageAggregatedOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'time_unit' => 'string',
        'period_start' => 'int',
        'period_end' => 'int',
        'total_usage' => 'int',
        'history_truncated' => 'bool',
        'data' => 'int[][]',
        'col_headers' => 'string[]',
        'row_headers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'time_unit' => null,
        'period_start' => 'int64',
        'period_end' => 'int64',
        'total_usage' => 'int64',
        'history_truncated' => null,
        'data' => 'int32',
        'col_headers' => null,
        'row_headers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_unit' => 'timeUnit',
        'period_start' => 'periodStart',
        'period_end' => 'periodEnd',
        'total_usage' => 'totalUsage',
        'history_truncated' => 'historyTruncated',
        'data' => 'data',
        'col_headers' => 'colHeaders',
        'row_headers' => 'rowHeaders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_unit' => 'setTimeUnit',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'total_usage' => 'setTotalUsage',
        'history_truncated' => 'setHistoryTruncated',
        'data' => 'setData',
        'col_headers' => 'setColHeaders',
        'row_headers' => 'setRowHeaders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_unit' => 'getTimeUnit',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'total_usage' => 'getTotalUsage',
        'history_truncated' => 'getHistoryTruncated',
        'data' => 'getData',
        'col_headers' => 'getColHeaders',
        'row_headers' => 'getRowHeaders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_unit'] = isset($data['time_unit']) ? $data['time_unit'] : null;
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['total_usage'] = isset($data['total_usage']) ? $data['total_usage'] : null;
        $this->container['history_truncated'] = isset($data['history_truncated']) ? $data['history_truncated'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['col_headers'] = isset($data['col_headers']) ? $data['col_headers'] : null;
        $this->container['row_headers'] = isset($data['row_headers']) ? $data['row_headers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_unit
     *
     * @return string|null
     */
    public function getTimeUnit()
    {
        return $this->container['time_unit'];
    }

    /**
     * Sets time_unit
     *
     * @param string|null $time_unit time_unit
     *
     * @return $this
     */
    public function setTimeUnit($time_unit)
    {
        $this->container['time_unit'] = $time_unit;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return int|null
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param int|null $period_start period_start
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return int|null
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param int|null $period_end period_end
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets total_usage
     *
     * @return int|null
     */
    public function getTotalUsage()
    {
        return $this->container['total_usage'];
    }

    /**
     * Sets total_usage
     *
     * @param int|null $total_usage total_usage
     *
     * @return $this
     */
    public function setTotalUsage($total_usage)
    {
        $this->container['total_usage'] = $total_usage;

        return $this;
    }

    /**
     * Gets history_truncated
     *
     * @return bool|null
     */
    public function getHistoryTruncated()
    {
        return $this->container['history_truncated'];
    }

    /**
     * Sets history_truncated
     *
     * @param bool|null $history_truncated history_truncated
     *
     * @return $this
     */
    public function setHistoryTruncated($history_truncated)
    {
        $this->container['history_truncated'] = $history_truncated;

        return $this;
    }

    /**
     * Gets data
     *
     * @return int[][]|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param int[][]|null $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets col_headers
     *
     * @return string[]|null
     */
    public function getColHeaders()
    {
        return $this->container['col_headers'];
    }

    /**
     * Sets col_headers
     *
     * @param string[]|null $col_headers col_headers
     *
     * @return $this
     */
    public function setColHeaders($col_headers)
    {
        $this->container['col_headers'] = $col_headers;

        return $this;
    }

    /**
     * Gets row_headers
     *
     * @return string[]|null
     */
    public function getRowHeaders()
    {
        return $this->container['row_headers'];
    }

    /**
     * Sets row_headers
     *
     * @param string[]|null $row_headers row_headers
     *
     * @return $this
     */
    public function setRowHeaders($row_headers)
    {
        $this->container['row_headers'] = $row_headers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


