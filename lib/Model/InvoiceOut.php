<?php
/**
 * InvoiceOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceOut Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoiceOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'items' => '\OpenAPI\Client\Model\InvoiceItemOut[]',
        'user_id' => 'string',
        'invoice_id' => 'string',
        'is_striped' => 'bool',
        'stripe_customer_id' => 'string',
        'amount_due' => 'int',
        'amount_paid' => 'int',
        'amount_remaining' => 'int',
        'attempted' => 'bool',
        'currency' => 'string',
        'invoice_date' => '\DateTime',
        'due_date' => '\DateTime',
        'description' => 'string',
        'invoice_pdf' => 'string',
        'period_start' => '\DateTime',
        'period_end' => '\DateTime',
        'receipt_number' => 'string',
        'invoice_status' => 'string',
        'sub_total' => 'int',
        'tax' => 'int',
        'tax_percent' => 'int',
        'total' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'items' => null,
        'user_id' => null,
        'invoice_id' => null,
        'is_striped' => null,
        'stripe_customer_id' => null,
        'amount_due' => 'int64',
        'amount_paid' => 'int64',
        'amount_remaining' => 'int64',
        'attempted' => null,
        'currency' => null,
        'invoice_date' => 'date-time',
        'due_date' => 'date-time',
        'description' => null,
        'invoice_pdf' => null,
        'period_start' => 'date-time',
        'period_end' => 'date-time',
        'receipt_number' => null,
        'invoice_status' => null,
        'sub_total' => 'int64',
        'tax' => 'int64',
        'tax_percent' => 'int64',
        'total' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'items' => 'items',
        'user_id' => 'userId',
        'invoice_id' => 'invoiceId',
        'is_striped' => 'isStriped',
        'stripe_customer_id' => 'stripeCustomerId',
        'amount_due' => 'amountDue',
        'amount_paid' => 'amountPaid',
        'amount_remaining' => 'amountRemaining',
        'attempted' => 'attempted',
        'currency' => 'currency',
        'invoice_date' => 'invoiceDate',
        'due_date' => 'dueDate',
        'description' => 'description',
        'invoice_pdf' => 'invoicePdf',
        'period_start' => 'periodStart',
        'period_end' => 'periodEnd',
        'receipt_number' => 'receiptNumber',
        'invoice_status' => 'invoiceStatus',
        'sub_total' => 'subTotal',
        'tax' => 'tax',
        'tax_percent' => 'taxPercent',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'items' => 'setItems',
        'user_id' => 'setUserId',
        'invoice_id' => 'setInvoiceId',
        'is_striped' => 'setIsStriped',
        'stripe_customer_id' => 'setStripeCustomerId',
        'amount_due' => 'setAmountDue',
        'amount_paid' => 'setAmountPaid',
        'amount_remaining' => 'setAmountRemaining',
        'attempted' => 'setAttempted',
        'currency' => 'setCurrency',
        'invoice_date' => 'setInvoiceDate',
        'due_date' => 'setDueDate',
        'description' => 'setDescription',
        'invoice_pdf' => 'setInvoicePdf',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'receipt_number' => 'setReceiptNumber',
        'invoice_status' => 'setInvoiceStatus',
        'sub_total' => 'setSubTotal',
        'tax' => 'setTax',
        'tax_percent' => 'setTaxPercent',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'items' => 'getItems',
        'user_id' => 'getUserId',
        'invoice_id' => 'getInvoiceId',
        'is_striped' => 'getIsStriped',
        'stripe_customer_id' => 'getStripeCustomerId',
        'amount_due' => 'getAmountDue',
        'amount_paid' => 'getAmountPaid',
        'amount_remaining' => 'getAmountRemaining',
        'attempted' => 'getAttempted',
        'currency' => 'getCurrency',
        'invoice_date' => 'getInvoiceDate',
        'due_date' => 'getDueDate',
        'description' => 'getDescription',
        'invoice_pdf' => 'getInvoicePdf',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'receipt_number' => 'getReceiptNumber',
        'invoice_status' => 'getInvoiceStatus',
        'sub_total' => 'getSubTotal',
        'tax' => 'getTax',
        'tax_percent' => 'getTaxPercent',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['is_striped'] = isset($data['is_striped']) ? $data['is_striped'] : null;
        $this->container['stripe_customer_id'] = isset($data['stripe_customer_id']) ? $data['stripe_customer_id'] : null;
        $this->container['amount_due'] = isset($data['amount_due']) ? $data['amount_due'] : null;
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        $this->container['amount_remaining'] = isset($data['amount_remaining']) ? $data['amount_remaining'] : null;
        $this->container['attempted'] = isset($data['attempted']) ? $data['attempted'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['invoice_pdf'] = isset($data['invoice_pdf']) ? $data['invoice_pdf'] : null;
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['receipt_number'] = isset($data['receipt_number']) ? $data['receipt_number'] : null;
        $this->container['invoice_status'] = isset($data['invoice_status']) ? $data['invoice_status'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['tax_percent'] = isset($data['tax_percent']) ? $data['tax_percent'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\InvoiceItemOut[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\InvoiceItemOut[]|null $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets is_striped
     *
     * @return bool|null
     */
    public function getIsStriped()
    {
        return $this->container['is_striped'];
    }

    /**
     * Sets is_striped
     *
     * @param bool|null $is_striped is_striped
     *
     * @return $this
     */
    public function setIsStriped($is_striped)
    {
        $this->container['is_striped'] = $is_striped;

        return $this;
    }

    /**
     * Gets stripe_customer_id
     *
     * @return string|null
     */
    public function getStripeCustomerId()
    {
        return $this->container['stripe_customer_id'];
    }

    /**
     * Sets stripe_customer_id
     *
     * @param string|null $stripe_customer_id stripe_customer_id
     *
     * @return $this
     */
    public function setStripeCustomerId($stripe_customer_id)
    {
        $this->container['stripe_customer_id'] = $stripe_customer_id;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return int|null
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param int|null $amount_due amount_due
     *
     * @return $this
     */
    public function setAmountDue($amount_due)
    {
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return int|null
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param int|null $amount_paid amount_paid
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets amount_remaining
     *
     * @return int|null
     */
    public function getAmountRemaining()
    {
        return $this->container['amount_remaining'];
    }

    /**
     * Sets amount_remaining
     *
     * @param int|null $amount_remaining amount_remaining
     *
     * @return $this
     */
    public function setAmountRemaining($amount_remaining)
    {
        $this->container['amount_remaining'] = $amount_remaining;

        return $this;
    }

    /**
     * Gets attempted
     *
     * @return bool|null
     */
    public function getAttempted()
    {
        return $this->container['attempted'];
    }

    /**
     * Sets attempted
     *
     * @param bool|null $attempted attempted
     *
     * @return $this
     */
    public function setAttempted($attempted)
    {
        $this->container['attempted'] = $attempted;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets invoice_pdf
     *
     * @return string|null
     */
    public function getInvoicePdf()
    {
        return $this->container['invoice_pdf'];
    }

    /**
     * Sets invoice_pdf
     *
     * @param string|null $invoice_pdf invoice_pdf
     *
     * @return $this
     */
    public function setInvoicePdf($invoice_pdf)
    {
        $this->container['invoice_pdf'] = $invoice_pdf;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return \DateTime|null
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param \DateTime|null $period_start period_start
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return \DateTime|null
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param \DateTime|null $period_end period_end
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets receipt_number
     *
     * @return string|null
     */
    public function getReceiptNumber()
    {
        return $this->container['receipt_number'];
    }

    /**
     * Sets receipt_number
     *
     * @param string|null $receipt_number receipt_number
     *
     * @return $this
     */
    public function setReceiptNumber($receipt_number)
    {
        $this->container['receipt_number'] = $receipt_number;

        return $this;
    }

    /**
     * Gets invoice_status
     *
     * @return string|null
     */
    public function getInvoiceStatus()
    {
        return $this->container['invoice_status'];
    }

    /**
     * Sets invoice_status
     *
     * @param string|null $invoice_status invoice_status
     *
     * @return $this
     */
    public function setInvoiceStatus($invoice_status)
    {
        $this->container['invoice_status'] = $invoice_status;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return int|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param int|null $sub_total sub_total
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return int|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param int|null $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tax_percent
     *
     * @return int|null
     */
    public function getTaxPercent()
    {
        return $this->container['tax_percent'];
    }

    /**
     * Sets tax_percent
     *
     * @param int|null $tax_percent tax_percent
     *
     * @return $this
     */
    public function setTaxPercent($tax_percent)
    {
        $this->container['tax_percent'] = $tax_percent;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


