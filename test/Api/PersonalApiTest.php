<?php
/**
 * PersonalApiTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PersonalApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PersonalApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for country
     *
     * [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin..
     *
     */
    public function testCountry()
    {
    }

    /**
     * Test case for countryBatch
     *
     * [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin..
     *
     */
    public function testCountryBatch()
    {
    }

    /**
     * Test case for diaspora
     *
     * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.).
     *
     */
    public function testDiaspora()
    {
    }

    /**
     * Test case for diasporaBatch
     *
     * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.).
     *
     */
    public function testDiasporaBatch()
    {
    }

    /**
     * Test case for gender
     *
     * Infer the likely gender of a name..
     *
     */
    public function testGender()
    {
    }

    /**
     * Test case for genderBatch
     *
     * Infer the likely gender of up to 100 names, detecting automatically the cultural context..
     *
     */
    public function testGenderBatch()
    {
    }

    /**
     * Test case for genderFull
     *
     * Infer the likely gender of a full name, ex. John H. Smith.
     *
     */
    public function testGenderFull()
    {
    }

    /**
     * Test case for genderFullBatch
     *
     * Infer the likely gender of up to 100 full names, detecting automatically the cultural context..
     *
     */
    public function testGenderFullBatch()
    {
    }

    /**
     * Test case for genderFullGeo
     *
     * Infer the likely gender of a full name, given a local context (ISO2 country code)..
     *
     */
    public function testGenderFullGeo()
    {
    }

    /**
     * Test case for genderFullGeoBatch
     *
     * Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code)..
     *
     */
    public function testGenderFullGeoBatch()
    {
    }

    /**
     * Test case for genderGeo
     *
     * Infer the likely gender of a name, given a local context (ISO2 country code)..
     *
     */
    public function testGenderGeo()
    {
    }

    /**
     * Test case for genderGeoBatch
     *
     * Infer the likely gender of up to 100 names, each given a local context (ISO2 country code)..
     *
     */
    public function testGenderGeoBatch()
    {
    }

    /**
     * Test case for origin
     *
     * [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead..
     *
     */
    public function testOrigin()
    {
    }

    /**
     * Test case for originBatch
     *
     * [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context..
     *
     */
    public function testOriginBatch()
    {
    }

    /**
     * Test case for parseName
     *
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John..
     *
     */
    public function testParseName()
    {
    }

    /**
     * Test case for parseNameBatch
     *
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John..
     *
     */
    public function testParseNameBatch()
    {
    }

    /**
     * Test case for parseNameGeo
     *
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context..
     *
     */
    public function testParseNameGeo()
    {
    }

    /**
     * Test case for parseNameGeoBatch
     *
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision..
     *
     */
    public function testParseNameGeoBatch()
    {
    }

    /**
     * Test case for parsedGenderBatch
     *
     * Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context..
     *
     */
    public function testParsedGenderBatch()
    {
    }

    /**
     * Test case for parsedGenderGeoBatch
     *
     * Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context..
     *
     */
    public function testParsedGenderGeoBatch()
    {
    }

    /**
     * Test case for usRaceEthnicity
     *
     * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino)..
     *
     */
    public function testUsRaceEthnicity()
    {
    }

    /**
     * Test case for usRaceEthnicityBatch
     *
     * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy..
     *
     */
    public function testUsRaceEthnicityBatch()
    {
    }

    /**
     * Test case for usRaceEthnicityZIP5
     *
     * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino)..
     *
     */
    public function testUsRaceEthnicityZIP5()
    {
    }

    /**
     * Test case for usZipRaceEthnicityBatch
     *
     * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code..
     *
     */
    public function testUsZipRaceEthnicityBatch()
    {
    }
}
