<?php
/**
 * InvoiceOutTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * OpenAPI spec version: 2.0.8
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client;

use PHPUnit\Framework\TestCase;

/**
 * InvoiceOutTest Class Doc Comment
 *
 * @category    Class
 * @description InvoiceOut
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class InvoiceOutTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "InvoiceOut"
     */
    public function testInvoiceOut()
    {
    }

    /**
     * Test attribute "items"
     */
    public function testPropertyItems()
    {
    }

    /**
     * Test attribute "user_id"
     */
    public function testPropertyUserId()
    {
    }

    /**
     * Test attribute "invoice_id"
     */
    public function testPropertyInvoiceId()
    {
    }

    /**
     * Test attribute "is_striped"
     */
    public function testPropertyIsStriped()
    {
    }

    /**
     * Test attribute "stripe_customer_id"
     */
    public function testPropertyStripeCustomerId()
    {
    }

    /**
     * Test attribute "amount_due"
     */
    public function testPropertyAmountDue()
    {
    }

    /**
     * Test attribute "amount_paid"
     */
    public function testPropertyAmountPaid()
    {
    }

    /**
     * Test attribute "amount_remaining"
     */
    public function testPropertyAmountRemaining()
    {
    }

    /**
     * Test attribute "attempted"
     */
    public function testPropertyAttempted()
    {
    }

    /**
     * Test attribute "currency"
     */
    public function testPropertyCurrency()
    {
    }

    /**
     * Test attribute "invoice_date"
     */
    public function testPropertyInvoiceDate()
    {
    }

    /**
     * Test attribute "due_date"
     */
    public function testPropertyDueDate()
    {
    }

    /**
     * Test attribute "description"
     */
    public function testPropertyDescription()
    {
    }

    /**
     * Test attribute "invoice_pdf"
     */
    public function testPropertyInvoicePdf()
    {
    }

    /**
     * Test attribute "period_start"
     */
    public function testPropertyPeriodStart()
    {
    }

    /**
     * Test attribute "period_end"
     */
    public function testPropertyPeriodEnd()
    {
    }

    /**
     * Test attribute "receipt_number"
     */
    public function testPropertyReceiptNumber()
    {
    }

    /**
     * Test attribute "invoice_status"
     */
    public function testPropertyInvoiceStatus()
    {
    }

    /**
     * Test attribute "sub_total"
     */
    public function testPropertySubTotal()
    {
    }

    /**
     * Test attribute "tax"
     */
    public function testPropertyTax()
    {
    }

    /**
     * Test attribute "tax_percent"
     */
    public function testPropertyTaxPercent()
    {
    }

    /**
     * Test attribute "total"
     */
    public function testPropertyTotal()
    {
    }
}
